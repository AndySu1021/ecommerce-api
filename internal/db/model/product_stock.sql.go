// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: product_stock.sql

package model

import (
	"context"
	"time"
)

const deleteProductStock = `-- name: DeleteProductStock :exec
DELETE
FROM product_stock
WHERE id = ?
  AND merchant_id = ?
`

type DeleteProductStockParams struct {
	ID         uint64
	MerchantID uint64
}

func (q *Queries) DeleteProductStock(ctx context.Context, arg DeleteProductStockParams) error {
	_, err := q.exec(ctx, q.deleteProductStockStmt, deleteProductStock, arg.ID, arg.MerchantID)
	return err
}

const deleteProductStockByProductID = `-- name: DeleteProductStockByProductID :exec
DELETE
FROM product_stock
WHERE product_id = ?
  AND merchant_id = ?
`

type DeleteProductStockByProductIDParams struct {
	ProductID  uint64
	MerchantID uint64
}

func (q *Queries) DeleteProductStockByProductID(ctx context.Context, arg DeleteProductStockByProductIDParams) error {
	_, err := q.exec(ctx, q.deleteProductStockByProductIDStmt, deleteProductStockByProductID, arg.ProductID, arg.MerchantID)
	return err
}

const getProductStock = `-- name: GetProductStock :many
SELECT pst.id, spec_1_id, spec_2_id, quantity, ` + "`" + `code` + "`" + `, psp1.name AS spec_1_name, IFNULL(psp2.name, '') AS spec_2_name
FROM product_stock pst
         INNER JOIN product_spec psp1 ON pst.spec_1_id = psp1.id
         LEFT JOIN product_spec psp2 ON pst.spec_2_id = psp2.id
WHERE pst.product_id = ?
  AND pst.merchant_id = ?
`

type GetProductStockParams struct {
	ProductID  uint64
	MerchantID uint64
}

type GetProductStockRow struct {
	ID        uint64
	Spec1ID   uint64
	Spec2ID   uint64
	Quantity  int32
	Code      string
	Spec1Name string
	Spec2Name interface{}
}

func (q *Queries) GetProductStock(ctx context.Context, arg GetProductStockParams) ([]GetProductStockRow, error) {
	rows, err := q.query(ctx, q.getProductStockStmt, getProductStock, arg.ProductID, arg.MerchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductStockRow{}
	for rows.Next() {
		var i GetProductStockRow
		if err := rows.Scan(
			&i.ID,
			&i.Spec1ID,
			&i.Spec2ID,
			&i.Quantity,
			&i.Code,
			&i.Spec1Name,
			&i.Spec2Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductStockQuantity = `-- name: UpdateProductStockQuantity :exec
UPDATE product_stock
SET quantity   = quantity + ?,
    updated_at = ?
WHERE id = ?
  AND merchant_id = ?
`

type UpdateProductStockQuantityParams struct {
	Quantity   int32
	UpdatedAt  time.Time
	ID         uint64
	MerchantID uint64
}

func (q *Queries) UpdateProductStockQuantity(ctx context.Context, arg UpdateProductStockQuantityParams) error {
	_, err := q.exec(ctx, q.updateProductStockQuantityStmt, updateProductStockQuantity,
		arg.Quantity,
		arg.UpdatedAt,
		arg.ID,
		arg.MerchantID,
	)
	return err
}
