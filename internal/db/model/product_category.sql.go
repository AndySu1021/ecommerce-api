// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: product_category.sql

package model

import (
	"context"
	"database/sql"
	"time"
)

const createProductCategory = `-- name: CreateProductCategory :execresult
INSERT INTO product_category (merchant_id, name, top_id, parent_id, tree_left, tree_right, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateProductCategoryParams struct {
	MerchantID uint64
	Name       string
	TopID      uint64
	ParentID   uint64
	TreeLeft   uint64
	TreeRight  uint64
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (sql.Result, error) {
	return q.exec(ctx, q.createProductCategoryStmt, createProductCategory,
		arg.MerchantID,
		arg.Name,
		arg.TopID,
		arg.ParentID,
		arg.TreeLeft,
		arg.TreeRight,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
DELETE
FROM product_category
WHERE top_id = ?
  and tree_left >= ?
  and tree_right <= ?
  AND merchant_id = ?
`

type DeleteProductCategoryParams struct {
	TopID      uint64
	TreeLeft   uint64
	TreeRight  uint64
	MerchantID uint64
}

func (q *Queries) DeleteProductCategory(ctx context.Context, arg DeleteProductCategoryParams) error {
	_, err := q.exec(ctx, q.deleteProductCategoryStmt, deleteProductCategory,
		arg.TopID,
		arg.TreeLeft,
		arg.TreeRight,
		arg.MerchantID,
	)
	return err
}

const getProductCategory = `-- name: GetProductCategory :one
SELECT id, merchant_id, name, top_id, parent_id, tree_left, tree_right, created_at, updated_at
FROM product_category
WHERE id = ?
  AND merchant_id = ?
`

type GetProductCategoryParams struct {
	ID         uint64
	MerchantID uint64
}

func (q *Queries) GetProductCategory(ctx context.Context, arg GetProductCategoryParams) (ProductCategory, error) {
	row := q.queryRow(ctx, q.getProductCategoryStmt, getProductCategory, arg.ID, arg.MerchantID)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.Name,
		&i.TopID,
		&i.ParentID,
		&i.TreeLeft,
		&i.TreeRight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductCategoryChildrenIDs = `-- name: GetProductCategoryChildrenIDs :many
SELECT a.id
FROM product_category AS a,
     (SELECT id, merchant_id, name, top_id, parent_id, tree_left, tree_right, created_at, updated_at FROM product_category WHERE product_category.id = ? AND product_category.merchant_id = ?) AS b
WHERE a.tree_left >= b.tree_left
  AND a.tree_right <= b.tree_right
  AND a.top_id = b.top_id
`

type GetProductCategoryChildrenIDsParams struct {
	ID         uint64
	MerchantID uint64
}

func (q *Queries) GetProductCategoryChildrenIDs(ctx context.Context, arg GetProductCategoryChildrenIDsParams) ([]uint64, error) {
	rows, err := q.query(ctx, q.getProductCategoryChildrenIDsStmt, getProductCategoryChildrenIDs, arg.ID, arg.MerchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uint64{}
	for rows.Next() {
		var id uint64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductCategoryTopCount = `-- name: GetProductCategoryTopCount :one
SELECT COUNT(*)
FROM product_category
WHERE parent_id = 0
  AND merchant_id = ?
`

func (q *Queries) GetProductCategoryTopCount(ctx context.Context, merchantID uint64) (int64, error) {
	row := q.queryRow(ctx, q.getProductCategoryTopCountStmt, getProductCategoryTopCount, merchantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProductCountByCategoryID = `-- name: GetProductCountByCategoryID :one
SELECT COUNT(*)
FROM product
WHERE category_id IN (SELECT a.id
                      FROM product_category AS a,
                           (SELECT id, top_id, tree_left, tree_right
                            FROM product_category
                            WHERE product_category.id = ? AND product_category.merchant_id = ?) AS b
                      WHERE a.tree_left >= b.tree_left
                        AND a.tree_right <= b.tree_right
                        AND a.top_id = b.top_id)
`

type GetProductCountByCategoryIDParams struct {
	ID         uint64
	MerchantID uint64
}

func (q *Queries) GetProductCountByCategoryID(ctx context.Context, arg GetProductCountByCategoryIDParams) (int64, error) {
	row := q.queryRow(ctx, q.getProductCountByCategoryIDStmt, getProductCountByCategoryID, arg.ID, arg.MerchantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateProductCategory = `-- name: UpdateProductCategory :exec
UPDATE product_category
SET name       = ?,
    updated_at = ?
WHERE id = ?
  AND merchant_id = ?
`

type UpdateProductCategoryParams struct {
	Name       string
	UpdatedAt  time.Time
	ID         uint64
	MerchantID uint64
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) error {
	_, err := q.exec(ctx, q.updateProductCategoryStmt, updateProductCategory,
		arg.Name,
		arg.UpdatedAt,
		arg.ID,
		arg.MerchantID,
	)
	return err
}

const updateProductCategoryLeftTree = `-- name: UpdateProductCategoryLeftTree :exec
UPDATE product_category
SET tree_right = tree_right + 2,
    updated_at = ?
WHERE tree_left < ?
  and tree_right >= ?
  and top_id = ?
  AND merchant_id = ?
`

type UpdateProductCategoryLeftTreeParams struct {
	UpdatedAt  time.Time
	TreeLeft   uint64
	TreeRight  uint64
	TopID      uint64
	MerchantID uint64
}

func (q *Queries) UpdateProductCategoryLeftTree(ctx context.Context, arg UpdateProductCategoryLeftTreeParams) error {
	_, err := q.exec(ctx, q.updateProductCategoryLeftTreeStmt, updateProductCategoryLeftTree,
		arg.UpdatedAt,
		arg.TreeLeft,
		arg.TreeRight,
		arg.TopID,
		arg.MerchantID,
	)
	return err
}

const updateProductCategoryRightTree = `-- name: UpdateProductCategoryRightTree :exec
UPDATE product_category
SET tree_right = tree_right + 2,
    tree_left  = tree_left + 2,
    updated_at = ?
WHERE tree_left > ?
  and top_id = ?
  AND merchant_id = ?
`

type UpdateProductCategoryRightTreeParams struct {
	UpdatedAt  time.Time
	TreeLeft   uint64
	TopID      uint64
	MerchantID uint64
}

func (q *Queries) UpdateProductCategoryRightTree(ctx context.Context, arg UpdateProductCategoryRightTreeParams) error {
	_, err := q.exec(ctx, q.updateProductCategoryRightTreeStmt, updateProductCategoryRightTree,
		arg.UpdatedAt,
		arg.TreeLeft,
		arg.TopID,
		arg.MerchantID,
	)
	return err
}

const updateProductCategoryTopID = `-- name: UpdateProductCategoryTopID :exec
UPDATE product_category
SET top_id = ?
where id = ?
  AND merchant_id = ?
`

type UpdateProductCategoryTopIDParams struct {
	TopID      uint64
	ID         uint64
	MerchantID uint64
}

func (q *Queries) UpdateProductCategoryTopID(ctx context.Context, arg UpdateProductCategoryTopIDParams) error {
	_, err := q.exec(ctx, q.updateProductCategoryTopIDStmt, updateProductCategoryTopID, arg.TopID, arg.ID, arg.MerchantID)
	return err
}
