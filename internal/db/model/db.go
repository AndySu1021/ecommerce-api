// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package model

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.adminLoginStmt, err = db.PrepareContext(ctx, adminLogin); err != nil {
		return nil, fmt.Errorf("error preparing query AdminLogin: %w", err)
	}
	if q.checkEmailExistStmt, err = db.PrepareContext(ctx, checkEmailExist); err != nil {
		return nil, fmt.Errorf("error preparing query CheckEmailExist: %w", err)
	}
	if q.createAdminStmt, err = db.PrepareContext(ctx, createAdmin); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAdmin: %w", err)
	}
	if q.createMemberStmt, err = db.PrepareContext(ctx, createMember); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMember: %w", err)
	}
	if q.createProductStmt, err = db.PrepareContext(ctx, createProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProduct: %w", err)
	}
	if q.createProductCategoryStmt, err = db.PrepareContext(ctx, createProductCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProductCategory: %w", err)
	}
	if q.createProductSpecStmt, err = db.PrepareContext(ctx, createProductSpec); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProductSpec: %w", err)
	}
	if q.deleteProductStmt, err = db.PrepareContext(ctx, deleteProduct); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProduct: %w", err)
	}
	if q.deleteProductCategoryStmt, err = db.PrepareContext(ctx, deleteProductCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProductCategory: %w", err)
	}
	if q.deleteProductSecondLevelSpecStmt, err = db.PrepareContext(ctx, deleteProductSecondLevelSpec); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProductSecondLevelSpec: %w", err)
	}
	if q.deleteProductSpecStmt, err = db.PrepareContext(ctx, deleteProductSpec); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProductSpec: %w", err)
	}
	if q.deleteProductSpecByProductIDStmt, err = db.PrepareContext(ctx, deleteProductSpecByProductID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProductSpecByProductID: %w", err)
	}
	if q.deleteProductStockStmt, err = db.PrepareContext(ctx, deleteProductStock); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProductStock: %w", err)
	}
	if q.deleteProductStockByProductIDStmt, err = db.PrepareContext(ctx, deleteProductStockByProductID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProductStockByProductID: %w", err)
	}
	if q.getMemberInfoStmt, err = db.PrepareContext(ctx, getMemberInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetMemberInfo: %w", err)
	}
	if q.getMerchantStmt, err = db.PrepareContext(ctx, getMerchant); err != nil {
		return nil, fmt.Errorf("error preparing query GetMerchant: %w", err)
	}
	if q.getMerchantByHostStmt, err = db.PrepareContext(ctx, getMerchantByHost); err != nil {
		return nil, fmt.Errorf("error preparing query GetMerchantByHost: %w", err)
	}
	if q.getProductStmt, err = db.PrepareContext(ctx, getProduct); err != nil {
		return nil, fmt.Errorf("error preparing query GetProduct: %w", err)
	}
	if q.getProductCategoryStmt, err = db.PrepareContext(ctx, getProductCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductCategory: %w", err)
	}
	if q.getProductCategoryChildrenIDsStmt, err = db.PrepareContext(ctx, getProductCategoryChildrenIDs); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductCategoryChildrenIDs: %w", err)
	}
	if q.getProductCategoryTopCountStmt, err = db.PrepareContext(ctx, getProductCategoryTopCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductCategoryTopCount: %w", err)
	}
	if q.getProductCountByCategoryIDStmt, err = db.PrepareContext(ctx, getProductCountByCategoryID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductCountByCategoryID: %w", err)
	}
	if q.getProductSpecStmt, err = db.PrepareContext(ctx, getProductSpec); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductSpec: %w", err)
	}
	if q.getProductSpecByIDStmt, err = db.PrepareContext(ctx, getProductSpecByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductSpecByID: %w", err)
	}
	if q.getProductSpecTitlesByProductIDStmt, err = db.PrepareContext(ctx, getProductSpecTitlesByProductID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductSpecTitlesByProductID: %w", err)
	}
	if q.getProductStockStmt, err = db.PrepareContext(ctx, getProductStock); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductStock: %w", err)
	}
	if q.listProductSecondLevelSpecIDsStmt, err = db.PrepareContext(ctx, listProductSecondLevelSpecIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListProductSecondLevelSpecIDs: %w", err)
	}
	if q.memberLoginStmt, err = db.PrepareContext(ctx, memberLogin); err != nil {
		return nil, fmt.Errorf("error preparing query MemberLogin: %w", err)
	}
	if q.resetPasswordStmt, err = db.PrepareContext(ctx, resetPassword); err != nil {
		return nil, fmt.Errorf("error preparing query ResetPassword: %w", err)
	}
	if q.switchProductStatusStmt, err = db.PrepareContext(ctx, switchProductStatus); err != nil {
		return nil, fmt.Errorf("error preparing query SwitchProductStatus: %w", err)
	}
	if q.updateMemberPasswordStmt, err = db.PrepareContext(ctx, updateMemberPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMemberPassword: %w", err)
	}
	if q.updateProductStmt, err = db.PrepareContext(ctx, updateProduct); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProduct: %w", err)
	}
	if q.updateProductCategoryStmt, err = db.PrepareContext(ctx, updateProductCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProductCategory: %w", err)
	}
	if q.updateProductCategoryLeftTreeStmt, err = db.PrepareContext(ctx, updateProductCategoryLeftTree); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProductCategoryLeftTree: %w", err)
	}
	if q.updateProductCategoryRightTreeStmt, err = db.PrepareContext(ctx, updateProductCategoryRightTree); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProductCategoryRightTree: %w", err)
	}
	if q.updateProductCategoryTopIDStmt, err = db.PrepareContext(ctx, updateProductCategoryTopID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProductCategoryTopID: %w", err)
	}
	if q.updateProductSalesStmt, err = db.PrepareContext(ctx, updateProductSales); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProductSales: %w", err)
	}
	if q.updateProductSpecStmt, err = db.PrepareContext(ctx, updateProductSpec); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProductSpec: %w", err)
	}
	if q.updateProductStockQuantityStmt, err = db.PrepareContext(ctx, updateProductStockQuantity); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProductStockQuantity: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.adminLoginStmt != nil {
		if cerr := q.adminLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing adminLoginStmt: %w", cerr)
		}
	}
	if q.checkEmailExistStmt != nil {
		if cerr := q.checkEmailExistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkEmailExistStmt: %w", cerr)
		}
	}
	if q.createAdminStmt != nil {
		if cerr := q.createAdminStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAdminStmt: %w", cerr)
		}
	}
	if q.createMemberStmt != nil {
		if cerr := q.createMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMemberStmt: %w", cerr)
		}
	}
	if q.createProductStmt != nil {
		if cerr := q.createProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductStmt: %w", cerr)
		}
	}
	if q.createProductCategoryStmt != nil {
		if cerr := q.createProductCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductCategoryStmt: %w", cerr)
		}
	}
	if q.createProductSpecStmt != nil {
		if cerr := q.createProductSpecStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductSpecStmt: %w", cerr)
		}
	}
	if q.deleteProductStmt != nil {
		if cerr := q.deleteProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductStmt: %w", cerr)
		}
	}
	if q.deleteProductCategoryStmt != nil {
		if cerr := q.deleteProductCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductCategoryStmt: %w", cerr)
		}
	}
	if q.deleteProductSecondLevelSpecStmt != nil {
		if cerr := q.deleteProductSecondLevelSpecStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductSecondLevelSpecStmt: %w", cerr)
		}
	}
	if q.deleteProductSpecStmt != nil {
		if cerr := q.deleteProductSpecStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductSpecStmt: %w", cerr)
		}
	}
	if q.deleteProductSpecByProductIDStmt != nil {
		if cerr := q.deleteProductSpecByProductIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductSpecByProductIDStmt: %w", cerr)
		}
	}
	if q.deleteProductStockStmt != nil {
		if cerr := q.deleteProductStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductStockStmt: %w", cerr)
		}
	}
	if q.deleteProductStockByProductIDStmt != nil {
		if cerr := q.deleteProductStockByProductIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductStockByProductIDStmt: %w", cerr)
		}
	}
	if q.getMemberInfoStmt != nil {
		if cerr := q.getMemberInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMemberInfoStmt: %w", cerr)
		}
	}
	if q.getMerchantStmt != nil {
		if cerr := q.getMerchantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMerchantStmt: %w", cerr)
		}
	}
	if q.getMerchantByHostStmt != nil {
		if cerr := q.getMerchantByHostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMerchantByHostStmt: %w", cerr)
		}
	}
	if q.getProductStmt != nil {
		if cerr := q.getProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductStmt: %w", cerr)
		}
	}
	if q.getProductCategoryStmt != nil {
		if cerr := q.getProductCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductCategoryStmt: %w", cerr)
		}
	}
	if q.getProductCategoryChildrenIDsStmt != nil {
		if cerr := q.getProductCategoryChildrenIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductCategoryChildrenIDsStmt: %w", cerr)
		}
	}
	if q.getProductCategoryTopCountStmt != nil {
		if cerr := q.getProductCategoryTopCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductCategoryTopCountStmt: %w", cerr)
		}
	}
	if q.getProductCountByCategoryIDStmt != nil {
		if cerr := q.getProductCountByCategoryIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductCountByCategoryIDStmt: %w", cerr)
		}
	}
	if q.getProductSpecStmt != nil {
		if cerr := q.getProductSpecStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductSpecStmt: %w", cerr)
		}
	}
	if q.getProductSpecByIDStmt != nil {
		if cerr := q.getProductSpecByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductSpecByIDStmt: %w", cerr)
		}
	}
	if q.getProductSpecTitlesByProductIDStmt != nil {
		if cerr := q.getProductSpecTitlesByProductIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductSpecTitlesByProductIDStmt: %w", cerr)
		}
	}
	if q.getProductStockStmt != nil {
		if cerr := q.getProductStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductStockStmt: %w", cerr)
		}
	}
	if q.listProductSecondLevelSpecIDsStmt != nil {
		if cerr := q.listProductSecondLevelSpecIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProductSecondLevelSpecIDsStmt: %w", cerr)
		}
	}
	if q.memberLoginStmt != nil {
		if cerr := q.memberLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing memberLoginStmt: %w", cerr)
		}
	}
	if q.resetPasswordStmt != nil {
		if cerr := q.resetPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetPasswordStmt: %w", cerr)
		}
	}
	if q.switchProductStatusStmt != nil {
		if cerr := q.switchProductStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing switchProductStatusStmt: %w", cerr)
		}
	}
	if q.updateMemberPasswordStmt != nil {
		if cerr := q.updateMemberPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMemberPasswordStmt: %w", cerr)
		}
	}
	if q.updateProductStmt != nil {
		if cerr := q.updateProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductStmt: %w", cerr)
		}
	}
	if q.updateProductCategoryStmt != nil {
		if cerr := q.updateProductCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductCategoryStmt: %w", cerr)
		}
	}
	if q.updateProductCategoryLeftTreeStmt != nil {
		if cerr := q.updateProductCategoryLeftTreeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductCategoryLeftTreeStmt: %w", cerr)
		}
	}
	if q.updateProductCategoryRightTreeStmt != nil {
		if cerr := q.updateProductCategoryRightTreeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductCategoryRightTreeStmt: %w", cerr)
		}
	}
	if q.updateProductCategoryTopIDStmt != nil {
		if cerr := q.updateProductCategoryTopIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductCategoryTopIDStmt: %w", cerr)
		}
	}
	if q.updateProductSalesStmt != nil {
		if cerr := q.updateProductSalesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductSalesStmt: %w", cerr)
		}
	}
	if q.updateProductSpecStmt != nil {
		if cerr := q.updateProductSpecStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductSpecStmt: %w", cerr)
		}
	}
	if q.updateProductStockQuantityStmt != nil {
		if cerr := q.updateProductStockQuantityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductStockQuantityStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                  DBTX
	tx                                  *sql.Tx
	adminLoginStmt                      *sql.Stmt
	checkEmailExistStmt                 *sql.Stmt
	createAdminStmt                     *sql.Stmt
	createMemberStmt                    *sql.Stmt
	createProductStmt                   *sql.Stmt
	createProductCategoryStmt           *sql.Stmt
	createProductSpecStmt               *sql.Stmt
	deleteProductStmt                   *sql.Stmt
	deleteProductCategoryStmt           *sql.Stmt
	deleteProductSecondLevelSpecStmt    *sql.Stmt
	deleteProductSpecStmt               *sql.Stmt
	deleteProductSpecByProductIDStmt    *sql.Stmt
	deleteProductStockStmt              *sql.Stmt
	deleteProductStockByProductIDStmt   *sql.Stmt
	getMemberInfoStmt                   *sql.Stmt
	getMerchantStmt                     *sql.Stmt
	getMerchantByHostStmt               *sql.Stmt
	getProductStmt                      *sql.Stmt
	getProductCategoryStmt              *sql.Stmt
	getProductCategoryChildrenIDsStmt   *sql.Stmt
	getProductCategoryTopCountStmt      *sql.Stmt
	getProductCountByCategoryIDStmt     *sql.Stmt
	getProductSpecStmt                  *sql.Stmt
	getProductSpecByIDStmt              *sql.Stmt
	getProductSpecTitlesByProductIDStmt *sql.Stmt
	getProductStockStmt                 *sql.Stmt
	listProductSecondLevelSpecIDsStmt   *sql.Stmt
	memberLoginStmt                     *sql.Stmt
	resetPasswordStmt                   *sql.Stmt
	switchProductStatusStmt             *sql.Stmt
	updateMemberPasswordStmt            *sql.Stmt
	updateProductStmt                   *sql.Stmt
	updateProductCategoryStmt           *sql.Stmt
	updateProductCategoryLeftTreeStmt   *sql.Stmt
	updateProductCategoryRightTreeStmt  *sql.Stmt
	updateProductCategoryTopIDStmt      *sql.Stmt
	updateProductSalesStmt              *sql.Stmt
	updateProductSpecStmt               *sql.Stmt
	updateProductStockQuantityStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                  tx,
		tx:                                  tx,
		adminLoginStmt:                      q.adminLoginStmt,
		checkEmailExistStmt:                 q.checkEmailExistStmt,
		createAdminStmt:                     q.createAdminStmt,
		createMemberStmt:                    q.createMemberStmt,
		createProductStmt:                   q.createProductStmt,
		createProductCategoryStmt:           q.createProductCategoryStmt,
		createProductSpecStmt:               q.createProductSpecStmt,
		deleteProductStmt:                   q.deleteProductStmt,
		deleteProductCategoryStmt:           q.deleteProductCategoryStmt,
		deleteProductSecondLevelSpecStmt:    q.deleteProductSecondLevelSpecStmt,
		deleteProductSpecStmt:               q.deleteProductSpecStmt,
		deleteProductSpecByProductIDStmt:    q.deleteProductSpecByProductIDStmt,
		deleteProductStockStmt:              q.deleteProductStockStmt,
		deleteProductStockByProductIDStmt:   q.deleteProductStockByProductIDStmt,
		getMemberInfoStmt:                   q.getMemberInfoStmt,
		getMerchantStmt:                     q.getMerchantStmt,
		getMerchantByHostStmt:               q.getMerchantByHostStmt,
		getProductStmt:                      q.getProductStmt,
		getProductCategoryStmt:              q.getProductCategoryStmt,
		getProductCategoryChildrenIDsStmt:   q.getProductCategoryChildrenIDsStmt,
		getProductCategoryTopCountStmt:      q.getProductCategoryTopCountStmt,
		getProductCountByCategoryIDStmt:     q.getProductCountByCategoryIDStmt,
		getProductSpecStmt:                  q.getProductSpecStmt,
		getProductSpecByIDStmt:              q.getProductSpecByIDStmt,
		getProductSpecTitlesByProductIDStmt: q.getProductSpecTitlesByProductIDStmt,
		getProductStockStmt:                 q.getProductStockStmt,
		listProductSecondLevelSpecIDsStmt:   q.listProductSecondLevelSpecIDsStmt,
		memberLoginStmt:                     q.memberLoginStmt,
		resetPasswordStmt:                   q.resetPasswordStmt,
		switchProductStatusStmt:             q.switchProductStatusStmt,
		updateMemberPasswordStmt:            q.updateMemberPasswordStmt,
		updateProductStmt:                   q.updateProductStmt,
		updateProductCategoryStmt:           q.updateProductCategoryStmt,
		updateProductCategoryLeftTreeStmt:   q.updateProductCategoryLeftTreeStmt,
		updateProductCategoryRightTreeStmt:  q.updateProductCategoryRightTreeStmt,
		updateProductCategoryTopIDStmt:      q.updateProductCategoryTopIDStmt,
		updateProductSalesStmt:              q.updateProductSalesStmt,
		updateProductSpecStmt:               q.updateProductSpecStmt,
		updateProductStockQuantityStmt:      q.updateProductStockQuantityStmt,
	}
}
