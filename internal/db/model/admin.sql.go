// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: admin.sql

package model

import (
	"context"
	"time"

	"ecommerce-api/pkg/constant"
	admin_vo "ecommerce-api/pkg/identity/admin/domain/vo"
)

const adminLogin = `-- name: AdminLogin :one
SELECT id, merchant_id, email, password, real_name, mobile, sex, last_login_time, is_enabled, created_at, updated_at
FROM admin
WHERE merchant_id = ?
  AND email = ?
  AND password = ?
`

type AdminLoginParams struct {
	MerchantID uint64
	Email      string
	Password   string
}

func (q *Queries) AdminLogin(ctx context.Context, arg AdminLoginParams) (Admin, error) {
	row := q.queryRow(ctx, q.adminLoginStmt, adminLogin, arg.MerchantID, arg.Email, arg.Password)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.Email,
		&i.Password,
		&i.RealName,
		&i.Mobile,
		&i.Sex,
		&i.LastLoginTime,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAdmin = `-- name: CreateAdmin :exec
INSERT INTO admin(merchant_id, email, password, real_name, mobile, sex, is_enabled, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateAdminParams struct {
	MerchantID uint64
	Email      string
	Password   string
	RealName   string
	Mobile     string
	Sex        admin_vo.Sex
	IsEnabled  constant.YesNo
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) error {
	_, err := q.exec(ctx, q.createAdminStmt, createAdmin,
		arg.MerchantID,
		arg.Email,
		arg.Password,
		arg.RealName,
		arg.Mobile,
		arg.Sex,
		arg.IsEnabled,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
