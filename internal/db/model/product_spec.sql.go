// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: product_spec.sql

package model

import (
	"context"
	"time"
)

const createProductSpec = `-- name: CreateProductSpec :exec
INSERT INTO product_spec (merchant_id, product_id, ` + "`" + `level` + "`" + `, type, ` + "`" + `name` + "`" + `, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateProductSpecParams struct {
	MerchantID uint64
	ProductID  uint64
	Level      int32
	Type       int32
	Name       string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateProductSpec(ctx context.Context, arg CreateProductSpecParams) error {
	_, err := q.exec(ctx, q.createProductSpecStmt, createProductSpec,
		arg.MerchantID,
		arg.ProductID,
		arg.Level,
		arg.Type,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteProductSecondLevelSpec = `-- name: DeleteProductSecondLevelSpec :exec
DELETE
FROM product_spec
WHERE product_id = ?
  AND merchant_id = ?
  AND ` + "`" + `level` + "`" + ` = 2
  AND ` + "`" + `type` + "`" + ` = 2
`

type DeleteProductSecondLevelSpecParams struct {
	ProductID  uint64
	MerchantID uint64
}

func (q *Queries) DeleteProductSecondLevelSpec(ctx context.Context, arg DeleteProductSecondLevelSpecParams) error {
	_, err := q.exec(ctx, q.deleteProductSecondLevelSpecStmt, deleteProductSecondLevelSpec, arg.ProductID, arg.MerchantID)
	return err
}

const deleteProductSpec = `-- name: DeleteProductSpec :exec
DELETE
FROM product_spec
WHERE id = ?
  AND merchant_id = ?
`

type DeleteProductSpecParams struct {
	ID         uint64
	MerchantID uint64
}

func (q *Queries) DeleteProductSpec(ctx context.Context, arg DeleteProductSpecParams) error {
	_, err := q.exec(ctx, q.deleteProductSpecStmt, deleteProductSpec, arg.ID, arg.MerchantID)
	return err
}

const deleteProductSpecByProductID = `-- name: DeleteProductSpecByProductID :exec
DELETE
FROM product_spec
WHERE product_id = ?
  AND merchant_id = ?
`

type DeleteProductSpecByProductIDParams struct {
	ProductID  uint64
	MerchantID uint64
}

func (q *Queries) DeleteProductSpecByProductID(ctx context.Context, arg DeleteProductSpecByProductIDParams) error {
	_, err := q.exec(ctx, q.deleteProductSpecByProductIDStmt, deleteProductSpecByProductID, arg.ProductID, arg.MerchantID)
	return err
}

const getProductSpec = `-- name: GetProductSpec :many
SELECT id, ` + "`" + `level` + "`" + `, type, ` + "`" + `name` + "`" + `
FROM product_spec
WHERE product_id = ?
  AND merchant_id = ?
ORDER BY id
`

type GetProductSpecParams struct {
	ProductID  uint64
	MerchantID uint64
}

type GetProductSpecRow struct {
	ID    uint64
	Level int32
	Type  int32
	Name  string
}

func (q *Queries) GetProductSpec(ctx context.Context, arg GetProductSpecParams) ([]GetProductSpecRow, error) {
	rows, err := q.query(ctx, q.getProductSpecStmt, getProductSpec, arg.ProductID, arg.MerchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductSpecRow{}
	for rows.Next() {
		var i GetProductSpecRow
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.Type,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductSpecByID = `-- name: GetProductSpecByID :one
SELECT id, merchant_id, product_id, level, type, name, created_at, updated_at
FROM product_spec
WHERE id = ?
  AND merchant_id = ?
`

type GetProductSpecByIDParams struct {
	ID         uint64
	MerchantID uint64
}

func (q *Queries) GetProductSpecByID(ctx context.Context, arg GetProductSpecByIDParams) (ProductSpec, error) {
	row := q.queryRow(ctx, q.getProductSpecByIDStmt, getProductSpecByID, arg.ID, arg.MerchantID)
	var i ProductSpec
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.ProductID,
		&i.Level,
		&i.Type,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductSpecTitlesByProductID = `-- name: GetProductSpecTitlesByProductID :many
SELECT name
FROM product_spec
WHERE product_id = ?
  AND merchant_id = ?
  AND type = 1
`

type GetProductSpecTitlesByProductIDParams struct {
	ProductID  uint64
	MerchantID uint64
}

func (q *Queries) GetProductSpecTitlesByProductID(ctx context.Context, arg GetProductSpecTitlesByProductIDParams) ([]string, error) {
	rows, err := q.query(ctx, q.getProductSpecTitlesByProductIDStmt, getProductSpecTitlesByProductID, arg.ProductID, arg.MerchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductSecondLevelSpecIDs = `-- name: ListProductSecondLevelSpecIDs :many
SELECT id
FROM product_spec
WHERE product_id = ?
  AND merchant_id = ?
  AND ` + "`" + `level` + "`" + ` = 2
  AND ` + "`" + `type` + "`" + ` = 2
`

type ListProductSecondLevelSpecIDsParams struct {
	ProductID  uint64
	MerchantID uint64
}

func (q *Queries) ListProductSecondLevelSpecIDs(ctx context.Context, arg ListProductSecondLevelSpecIDsParams) ([]uint64, error) {
	rows, err := q.query(ctx, q.listProductSecondLevelSpecIDsStmt, listProductSecondLevelSpecIDs, arg.ProductID, arg.MerchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uint64{}
	for rows.Next() {
		var id uint64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductSpec = `-- name: UpdateProductSpec :exec
UPDATE product_spec
SET ` + "`" + `name` + "`" + `     = ?,
    updated_at = ?
WHERE id = ?
  AND merchant_id = ?
`

type UpdateProductSpecParams struct {
	Name       string
	UpdatedAt  time.Time
	ID         uint64
	MerchantID uint64
}

func (q *Queries) UpdateProductSpec(ctx context.Context, arg UpdateProductSpecParams) error {
	_, err := q.exec(ctx, q.updateProductSpecStmt, updateProductSpec,
		arg.Name,
		arg.UpdatedAt,
		arg.ID,
		arg.MerchantID,
	)
	return err
}
