// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: product.sql

package model

import (
	"context"
	"database/sql"
	"time"

	product_vo "ecommerce-api/pkg/catalog/product/domain/vo"
	"ecommerce-api/pkg/constant"
)

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO product (merchant_id, ` + "`" + `name` + "`" + `, category_id, currency_id, price, special_price, special_price_start,
                     special_price_end, single_order_limit, is_single_order_only, temperature, length, width, height,
                     weight, support_delivery_method, is_air_contraband, ` + "`" + `description` + "`" + `, pictures, extra, created_at,
                     updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateProductParams struct {
	MerchantID            uint64
	Name                  string
	CategoryID            uint64
	CurrencyID            constant.Currency
	Price                 uint64
	SpecialPrice          uint64
	SpecialPriceStart     sql.NullTime
	SpecialPriceEnd       sql.NullTime
	SingleOrderLimit      int32
	IsSingleOrderOnly     constant.YesNo
	Temperature           product_vo.Temperature
	Length                int32
	Width                 int32
	Height                int32
	Weight                int32
	SupportDeliveryMethod product_vo.SupportDeliveryMethod
	IsAirContraband       constant.YesNo
	Description           string
	Pictures              product_vo.PictureArray
	Extra                 product_vo.Extra
	CreatedAt             time.Time
	UpdatedAt             time.Time
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.exec(ctx, q.createProductStmt, createProduct,
		arg.MerchantID,
		arg.Name,
		arg.CategoryID,
		arg.CurrencyID,
		arg.Price,
		arg.SpecialPrice,
		arg.SpecialPriceStart,
		arg.SpecialPriceEnd,
		arg.SingleOrderLimit,
		arg.IsSingleOrderOnly,
		arg.Temperature,
		arg.Length,
		arg.Width,
		arg.Height,
		arg.Weight,
		arg.SupportDeliveryMethod,
		arg.IsAirContraband,
		arg.Description,
		arg.Pictures,
		arg.Extra,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE
FROM product
WHERE id = ?
  AND merchant_id = ?
`

type DeleteProductParams struct {
	ID         uint64
	MerchantID uint64
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.exec(ctx, q.deleteProductStmt, deleteProduct, arg.ID, arg.MerchantID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT p.id, p.merchant_id, p.name, p.category_id, p.currency_id, p.price, p.special_price, p.special_price_start, p.special_price_end, p.single_order_limit, p.is_single_order_only, p.temperature, p.length, p.width, p.height, p.weight, p.support_delivery_method, p.is_air_contraband, p.description, p.pictures, p.extra, p.is_enabled, p.sales, p.created_at, p.updated_at, pc.name AS category_name
FROM product p
         INNER JOIN product_category pc ON pc.id = p.category_id
WHERE p.id = ?
  AND p.merchant_id = ?
`

type GetProductParams struct {
	ID         uint64
	MerchantID uint64
}

type GetProductRow struct {
	ID                    uint64
	MerchantID            uint64
	Name                  string
	CategoryID            uint64
	CurrencyID            constant.Currency
	Price                 uint64
	SpecialPrice          uint64
	SpecialPriceStart     sql.NullTime
	SpecialPriceEnd       sql.NullTime
	SingleOrderLimit      int32
	IsSingleOrderOnly     constant.YesNo
	Temperature           product_vo.Temperature
	Length                int32
	Width                 int32
	Height                int32
	Weight                int32
	SupportDeliveryMethod product_vo.SupportDeliveryMethod
	IsAirContraband       constant.YesNo
	Description           string
	Pictures              product_vo.PictureArray
	Extra                 product_vo.Extra
	IsEnabled             constant.YesNo
	Sales                 uint64
	CreatedAt             time.Time
	UpdatedAt             time.Time
	CategoryName          string
}

func (q *Queries) GetProduct(ctx context.Context, arg GetProductParams) (GetProductRow, error) {
	row := q.queryRow(ctx, q.getProductStmt, getProduct, arg.ID, arg.MerchantID)
	var i GetProductRow
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.Name,
		&i.CategoryID,
		&i.CurrencyID,
		&i.Price,
		&i.SpecialPrice,
		&i.SpecialPriceStart,
		&i.SpecialPriceEnd,
		&i.SingleOrderLimit,
		&i.IsSingleOrderOnly,
		&i.Temperature,
		&i.Length,
		&i.Width,
		&i.Height,
		&i.Weight,
		&i.SupportDeliveryMethod,
		&i.IsAirContraband,
		&i.Description,
		&i.Pictures,
		&i.Extra,
		&i.IsEnabled,
		&i.Sales,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CategoryName,
	)
	return i, err
}

const switchProductStatus = `-- name: SwitchProductStatus :exec
UPDATE product
SET is_enabled = !is_enabled
WHERE id = ?
  AND merchant_id = ?
`

type SwitchProductStatusParams struct {
	ID         uint64
	MerchantID uint64
}

func (q *Queries) SwitchProductStatus(ctx context.Context, arg SwitchProductStatusParams) error {
	_, err := q.exec(ctx, q.switchProductStatusStmt, switchProductStatus, arg.ID, arg.MerchantID)
	return err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE product
SET ` + "`" + `name` + "`" + `                  = ?,
    category_id             = ?,
    ` + "`" + `description` + "`" + `           = ?,
    price                   = ?,
    special_price           = ?,
    special_price_start     = ?,
    special_price_end       = ?,
    single_order_limit      = ?,
    is_single_order_only    = ?,
    temperature             = ?,
    length                  = ?,
    width                   = ?,
    height                  = ?,
    weight                  = ?,
    support_delivery_method = ?,
    is_air_contraband       = ?,
    pictures                = ?,
    updated_at              = ?
WHERE id = ?
  AND merchant_id = ?
`

type UpdateProductParams struct {
	Name                  string
	CategoryID            uint64
	Description           string
	Price                 uint64
	SpecialPrice          uint64
	SpecialPriceStart     sql.NullTime
	SpecialPriceEnd       sql.NullTime
	SingleOrderLimit      int32
	IsSingleOrderOnly     constant.YesNo
	Temperature           product_vo.Temperature
	Length                int32
	Width                 int32
	Height                int32
	Weight                int32
	SupportDeliveryMethod product_vo.SupportDeliveryMethod
	IsAirContraband       constant.YesNo
	Pictures              product_vo.PictureArray
	UpdatedAt             time.Time
	ID                    uint64
	MerchantID            uint64
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.exec(ctx, q.updateProductStmt, updateProduct,
		arg.Name,
		arg.CategoryID,
		arg.Description,
		arg.Price,
		arg.SpecialPrice,
		arg.SpecialPriceStart,
		arg.SpecialPriceEnd,
		arg.SingleOrderLimit,
		arg.IsSingleOrderOnly,
		arg.Temperature,
		arg.Length,
		arg.Width,
		arg.Height,
		arg.Weight,
		arg.SupportDeliveryMethod,
		arg.IsAirContraband,
		arg.Pictures,
		arg.UpdatedAt,
		arg.ID,
		arg.MerchantID,
	)
	return err
}

const updateProductSales = `-- name: UpdateProductSales :exec
UPDATE product
SET sales = sales + ?
WHERE id = ?
`

type UpdateProductSalesParams struct {
	Sales uint64
	ID    uint64
}

func (q *Queries) UpdateProductSales(ctx context.Context, arg UpdateProductSalesParams) error {
	_, err := q.exec(ctx, q.updateProductSalesStmt, updateProductSales, arg.Sales, arg.ID)
	return err
}
